[{"/Users/tavallai/codes/JS/didartshop-dashboard/src/index.js":"1","/Users/tavallai/codes/JS/didartshop-dashboard/src/App.js":"2","/Users/tavallai/codes/JS/didartshop-dashboard/src/Routes/DashboardRoutes.js":"3","/Users/tavallai/codes/JS/didartshop-dashboard/src/Routes/PrivateAdminRoute.js":"4","/Users/tavallai/codes/JS/didartshop-dashboard/src/Routes/PublicAdminRoute.js":"5","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/login/DashboardLogin.js":"6","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/ProductsSection.js":"7","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/WebsiteManagement.js":"8","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/Discount.js":"9","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/OrdersDetail.js":"10","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/CampaignSection.js":"11","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Category/CategorySection.js":"12","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Comments/CommentsSection.js":"13","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/login/Style.js":"14","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/OrdersSection.js":"15","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Fiance/FianceSection.js":"16","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Comments/CommentsList.js":"17","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardForms/DashboardLayout.js":"18","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/Product.js":"19","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Account/Account.js":"20","/Users/tavallai/codes/JS/didartshop-dashboard/src/utills/ToFaDigit.js":"21","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/Attributes.js":"22","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/SocialNetwork.js":"23","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/Sliders.js":"24","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/useSettingData.js":"25","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/DateFormat.js":"26","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Account/Style.js":"27","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/GetProductData.js":"28","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/EditImage.js":"29","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/convertProductData.js":"30","/Users/tavallai/codes/JS/didartshop-dashboard/src/utills/Hooks/useAxios.js":"31","/Users/tavallai/codes/JS/didartshop-dashboard/src/Routes/Link/ItemLink.js":"32","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/Styles/ProductSectionStyle.js":"33","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/Styles/ShowProductStyle.js":"34","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/Styles/WebsiteManagmentStyle.js":"35","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/Styles/DiscountStyle.js":"36","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Table/Components/TablePaginationActions.js":"37","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Table/Styles/StyledTableRow.js":"38","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Table/Styles/StyledTableCell.js":"39","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/ProductCampaign.js":"40","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/ProductTag.js":"41","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/ProductCategory.js":"42","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/ProductStock.js":"43","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/AddImage.js":"44","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/ProductInfo.js":"45","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardForms/DashboardMenu.js":"46","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardForms/Styles/LayoutStyle.js":"47","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/Styles/AttributesStyle.js":"48","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/Styles/SocialNetworkStyle.js":"49","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/Styles/SlidersStyle.js":"50","/Users/tavallai/codes/JS/didartshop-dashboard/src/utills/Hooks/useForceUpdate.js":"51","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/Styles/ImagesStyle.js":"52","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/AddImageDialog.js":"53","/Users/tavallai/codes/JS/didartshop-dashboard/src/Routes/Link/ListItemLink.js":"54","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/Styles/ProductStockStyle.js":"55","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/Styles/ProductInfoStyle.js":"56","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardForms/Styles/MenuStyle.js":"57","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Comments/CommentCard.js":"58","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Fiance/Style.js":"59","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Category/AddCategoryDialog.js":"60","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/Styles/CampaignSectionStyle.js":"61","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/useCampaignsData.js":"62","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/CampaignDiscount.js":"63","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/CampaignAmazing.js":"64","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/CampaignBanners.js":"65","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/CartCost.js":"66","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/ProductDetail.js":"67","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/CartDetail.js":"68","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/CustomerInfo.js":"69","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/OrderState.js":"70","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/Styles/AmazingStyle.js":"71","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/Styles/BannersStyle.js":"72","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/Styles/DiscountTableStyle.js":"73","/Users/tavallai/codes/JS/didartshop-dashboard/src/utills/Auth.js":"74","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Comments/Actions/useAllCommentsData.js":"75","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Public/DeleteDialog.js":"76","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Comments/Actions/useDeleteComment.js":"77","/Users/tavallai/codes/JS/didartshop-dashboard/src/utills/Hooks/useCategoriesData.js":"78","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Comments/Actions/useChangeCommentStatus.js":"79","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Comments/Styles/useCommentCardStyle.js":"80","/Users/tavallai/codes/JS/didartshop-dashboard/src/utills/Hooks/useLogin.js":"81","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/Styles/useOrderSectionStyles.js":"82","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/FetchData/useOrderDetails.js":"83"},{"size":502,"mtime":1609791084256,"results":"84","hashOfConfig":"85"},{"size":1633,"mtime":1609799865150,"results":"86","hashOfConfig":"85"},{"size":2856,"mtime":1613080660376,"results":"87","hashOfConfig":"85"},{"size":666,"mtime":1609799865156,"results":"88","hashOfConfig":"85"},{"size":524,"mtime":1609799865156,"results":"89","hashOfConfig":"85"},{"size":5217,"mtime":1609799865155,"results":"90","hashOfConfig":"85"},{"size":20633,"mtime":1609799970535,"results":"91","hashOfConfig":"85"},{"size":5110,"mtime":1609791083397,"results":"92","hashOfConfig":"85"},{"size":9868,"mtime":1609799865151,"results":"93","hashOfConfig":"85"},{"size":2397,"mtime":1613148974516,"results":"94","hashOfConfig":"85"},{"size":3688,"mtime":1609799865151,"results":"95","hashOfConfig":"85"},{"size":16005,"mtime":1609799865152,"results":"96","hashOfConfig":"85"},{"size":6399,"mtime":1610221145737,"results":"97","hashOfConfig":"85"},{"size":1438,"mtime":1609791083401,"results":"98","hashOfConfig":"85"},{"size":10203,"mtime":1613150740722,"results":"99","hashOfConfig":"85"},{"size":8071,"mtime":1613081119800,"results":"100","hashOfConfig":"85"},{"size":2516,"mtime":1610288332585,"results":"101","hashOfConfig":"85"},{"size":3363,"mtime":1610758166074,"results":"102","hashOfConfig":"85"},{"size":15182,"mtime":1610308866962,"results":"103","hashOfConfig":"85"},{"size":6482,"mtime":1609791083391,"results":"104","hashOfConfig":"85"},{"size":951,"mtime":1613080105996,"results":"105","hashOfConfig":"85"},{"size":6577,"mtime":1609791083396,"results":"106","hashOfConfig":"85"},{"size":2505,"mtime":1609791083396,"results":"107","hashOfConfig":"85"},{"size":4466,"mtime":1609791083396,"results":"108","hashOfConfig":"85"},{"size":1471,"mtime":1609791083397,"results":"109","hashOfConfig":"85"},{"size":541,"mtime":1609799865151,"results":"110","hashOfConfig":"85"},{"size":933,"mtime":1609799865150,"results":"111","hashOfConfig":"85"},{"size":3125,"mtime":1609791083399,"results":"112","hashOfConfig":"85"},{"size":10160,"mtime":1613090371441,"results":"113","hashOfConfig":"85"},{"size":1336,"mtime":1610247640875,"results":"114","hashOfConfig":"85"},{"size":264,"mtime":1609791084257,"results":"115","hashOfConfig":"85"},{"size":712,"mtime":1609799865156,"results":"116","hashOfConfig":"85"},{"size":991,"mtime":1609799865155,"results":"117","hashOfConfig":"85"},{"size":1105,"mtime":1609799865155,"results":"118","hashOfConfig":"85"},{"size":1097,"mtime":1609799865153,"results":"119","hashOfConfig":"85"},{"size":982,"mtime":1609799865151,"results":"120","hashOfConfig":"85"},{"size":6851,"mtime":1610605274859,"results":"121","hashOfConfig":"85"},{"size":293,"mtime":1609791083401,"results":"122","hashOfConfig":"85"},{"size":443,"mtime":1609791083401,"results":"123","hashOfConfig":"85"},{"size":3038,"mtime":1609799865154,"results":"124","hashOfConfig":"85"},{"size":3105,"mtime":1609799865154,"results":"125","hashOfConfig":"85"},{"size":2845,"mtime":1609799865154,"results":"126","hashOfConfig":"85"},{"size":8741,"mtime":1610308866954,"results":"127","hashOfConfig":"85"},{"size":8965,"mtime":1609791083399,"results":"128","hashOfConfig":"85"},{"size":11447,"mtime":1609791083400,"results":"129","hashOfConfig":"85"},{"size":5368,"mtime":1610223126817,"results":"130","hashOfConfig":"85"},{"size":2372,"mtime":1610758166064,"results":"131","hashOfConfig":"85"},{"size":1134,"mtime":1609799865153,"results":"132","hashOfConfig":"85"},{"size":507,"mtime":1609799865153,"results":"133","hashOfConfig":"85"},{"size":1079,"mtime":1609799865153,"results":"134","hashOfConfig":"85"},{"size":213,"mtime":1609791084257,"results":"135","hashOfConfig":"85"},{"size":2180,"mtime":1609799865155,"results":"136","hashOfConfig":"85"},{"size":2212,"mtime":1609791083399,"results":"137","hashOfConfig":"85"},{"size":16540,"mtime":1610232071923,"results":"138","hashOfConfig":"85"},{"size":2084,"mtime":1609799865155,"results":"139","hashOfConfig":"85"},{"size":1061,"mtime":1609799865155,"results":"140","hashOfConfig":"85"},{"size":241,"mtime":1610147946426,"results":"141","hashOfConfig":"85"},{"size":11698,"mtime":1610412567404,"results":"142","hashOfConfig":"85"},{"size":1835,"mtime":1609842845530,"results":"143","hashOfConfig":"85"},{"size":3826,"mtime":1609799865151,"results":"144","hashOfConfig":"85"},{"size":870,"mtime":1609799865151,"results":"145","hashOfConfig":"85"},{"size":1706,"mtime":1609799865151,"results":"146","hashOfConfig":"85"},{"size":12280,"mtime":1609799865150,"results":"147","hashOfConfig":"85"},{"size":9451,"mtime":1609799865150,"results":"148","hashOfConfig":"85"},{"size":7671,"mtime":1609799865150,"results":"149","hashOfConfig":"85"},{"size":3389,"mtime":1613141523177,"results":"150","hashOfConfig":"85"},{"size":7119,"mtime":1613149541029,"results":"151","hashOfConfig":"85"},{"size":1891,"mtime":1613145487095,"results":"152","hashOfConfig":"85"},{"size":4734,"mtime":1613149162899,"results":"153","hashOfConfig":"85"},{"size":6345,"mtime":1613150492563,"results":"154","hashOfConfig":"85"},{"size":2043,"mtime":1609799865151,"results":"155","hashOfConfig":"85"},{"size":1382,"mtime":1609799865151,"results":"156","hashOfConfig":"85"},{"size":834,"mtime":1609799865151,"results":"157","hashOfConfig":"85"},{"size":569,"mtime":1609799865156,"results":"158","hashOfConfig":"85"},{"size":1129,"mtime":1609800213176,"results":"159","hashOfConfig":"85"},{"size":3026,"mtime":1609799865155,"results":"160","hashOfConfig":"85"},{"size":951,"mtime":1609799865152,"results":"161","hashOfConfig":"85"},{"size":890,"mtime":1610489927339,"results":"162","hashOfConfig":"85"},{"size":1082,"mtime":1609799865152,"results":"163","hashOfConfig":"85"},{"size":2129,"mtime":1609799970535,"results":"164","hashOfConfig":"85"},{"size":931,"mtime":1609799865156,"results":"165","hashOfConfig":"85"},{"size":880,"mtime":1613081076788,"results":"166","hashOfConfig":"85"},{"size":801,"mtime":1613094547925,"results":"167","hashOfConfig":"85"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},"1tgvenu",{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"170"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"170"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"170"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"170"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"170"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"170"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"170"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"170"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"170"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"170"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"170"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"296","usedDeprecatedRules":"170"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"170"},{"filePath":"336","messages":"337","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"170"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"170"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},"/Users/tavallai/codes/JS/didartshop-dashboard/src/index.js",[],["350","351"],"/Users/tavallai/codes/JS/didartshop-dashboard/src/App.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/Routes/DashboardRoutes.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/Routes/PrivateAdminRoute.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/Routes/PublicAdminRoute.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/login/DashboardLogin.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/ProductsSection.js",["352"],"import React, {useEffect, useState} from \"react\";\nimport {Button, IconButton, Link, Paper, SvgIcon, TableBody, TableContainer, Typography} from \"@material-ui/core\";\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport ItemLink from \"../../Routes/Link/ItemLink\";\nimport {StyledTableCell} from \"../Table/Styles/StyledTableCell\";\nimport {StyledTableRow} from \"../Table/Styles/StyledTableRow\";\nimport TablePaginationActions from \"../Table/Components/TablePaginationActions\";\nimport {useAxios} from '../../utills/Hooks/useAxios'\nimport {toFaDigit} from \"../../utills/ToFaDigit\";\nimport {useStyles} from \"./Styles/ProductSectionStyle\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport moment from 'jalali-moment'\nimport DeleteDialog from \"../Public/DeleteDialog\";\n\n\nfunction ProductsSection() {\n    const classes = useStyles();\n    const [page, setPage] = React.useState(0)\n    const [deleteDialog, setDeleteDialog] = useState({\n        open: false,\n        id: null,\n    })\n    const [{data, loading}, fetch] = useAxios(\n        `admin/merchandise_mng/get_all_merchandise?page=${page}`);\n\n    const [{data: excelLink, loading: exportLoading}, exportExcel] = useAxios(\n        {\n            url: `admin/merchandise_mng/export_exel`,\n        }\n    );\n\n    const [, executeDelete] = useAxios(\n        {\n            url: `/admin/merchandise_mng/delete_merchandise`,\n            method: \"DELETE\",\n        },\n        {manual: true}\n    );\n    useEffect(() => {\n        fetch()\n        exportExcel()\n    }, [])\n\n    let numPages = 0\n\n    if (data !== undefined)\n        numPages = data.data.pages + 1\n\n    const handleChangePages = (pageNumber) => {\n        setPage(pageNumber)\n    }\n\n\n    const deleteHandler = () => {\n        executeDelete({\n            data: {\n                \"id\": `${deleteDialog.id}`\n            }\n        })\n            .then(() => {\n                fetch()\n                setDeleteDialog({\n                    open: false,\n                    id: null,\n                })\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n    const onCloseDialog = () => {\n        setDeleteDialog({\n            ...deleteDialog,\n            open: false,\n        })\n    }\n\n    return (\n        <div style={{display: 'flex', flexDirection: 'column'}}>\n            {\n                loading || exportLoading\n                    ? <div style={{height: 1000, position: 'relative'}}>\n                        <Skeleton style={{position: 'absolute', top: '-22%'}} animation=\"pulse\" height={1000} width=\"100%\">\n                            <TableContainer component={Paper}/>\n                        </Skeleton>\n                    </div>\n                    :\n                    <TableContainer component={Paper}>\n                        <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                            <Typography className={classes.title} component={\"span\"}>محصولات</Typography>\n                            <div>\n                                <ItemLink to={'/admin/dashboard/products/add'}>\n                                    <Button\n                                        dir={'ltr'}\n                                        className={classes.addProduct}\n                                        variant={\"contained\"}\n                                        endIcon={<AddCircleOutlineIcon/>}\n                                    >\n                                        اضافه کردن محصول جدید\n                                    </Button>\n                                </ItemLink>\n                                <Link\n                                    href={`${(!exportLoading && excelLink !== undefined) && excelLink.data.file_dir}`}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    <IconButton className={classes.export}\n                                                aria-label={\"export\"}>\n                                        <SvgIcon xmlns=\"http://www.w3.org/2000/svg\" width=\"17\" height=\"17\"\n                                                 viewBox=\"0 0 17 17\">\n                                            <g id=\"common-file-text-download\" transform=\"translate(-0.25 -0.25)\">\n                                                <circle id=\"Ellipse_128\" data-name=\"Ellipse 128\" cx=\"4.267\" cy=\"4.267\"\n                                                        r=\"4.267\"\n                                                        transform=\"translate(8.217 8.217)\" fill=\"none\" stroke=\"#f16522\"\n                                                        strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1\"/>\n                                                <path id=\"Path_30125\" data-name=\"Path 30125\" d=\"M17.25,14.25v4.267\"\n                                                      transform=\"translate(-4.767 -3.9)\" fill=\"none\" stroke=\"#f16522\"\n                                                      strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1\"/>\n                                                <path id=\"Path_30126\" data-name=\"Path 30126\" d=\"M16.6,19.6,15,18\"\n                                                      transform=\"translate(-4.117 -4.983)\" fill=\"none\" stroke=\"#f16522\"\n                                                      strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1\"/>\n                                                <path id=\"Path_30127\" data-name=\"Path 30127\" d=\"M17.25,19.6l1.6-1.6\"\n                                                      transform=\"translate(-4.767 -4.983)\" fill=\"none\" stroke=\"#f16522\"\n                                                      strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1\"/>\n                                                <path id=\"Path_30128\" data-name=\"Path 30128\" d=\"M3.75,6.75h7.467\"\n                                                      transform=\"translate(-0.867 -1.733)\" fill=\"none\" stroke=\"#f16522\"\n                                                      strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1\"/>\n                                                <path id=\"Path_30129\" data-name=\"Path 30129\" d=\"M3.75,11.25H8.017\"\n                                                      transform=\"translate(-0.867 -3.033)\" fill=\"none\" stroke=\"#f16522\"\n                                                      strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1\"/>\n                                                <path id=\"Path_30130\" data-name=\"Path 30130\" d=\"M3.75,15.75H6.417\"\n                                                      transform=\"translate(-0.867 -4.333)\" fill=\"none\" stroke=\"#f16522\"\n                                                      strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1\"/>\n                                                <path id=\"Path_30131\" data-name=\"Path 30131\"\n                                                      d=\"M5.55,14.617H1.817A1.067,1.067,0,0,1,.75,13.55V1.817A1.067,1.067,0,0,1,1.817.75H9.375a1.067,1.067,0,0,1,.754.312L12.171,3.1a1.067,1.067,0,0,1,.312.754V5.55\"\n                                                      fill=\"none\" stroke=\"#f16522\" strokeLinecap=\"round\"\n                                                      strokeLinejoin=\"round\"\n                                                      strokeWidth=\"1\"/>\n                                            </g>\n                                        </SvgIcon>\n                                        <Typography\n                                            style={{\n                                                color: '#F16522',\n                                                fontSize: '14px',\n                                                fontFamily: 'Shabnam',\n                                                fontWeight: \"bold\",\n                                                margin: '8px 8px'\n                                            }}\n                                            component={'span'}\n                                        >اکسپورت\n                                        </Typography>\n                                    </IconButton>\n                                </Link>\n                            </div>\n                        </div>\n\n                        {\n                            data.data.merchandises.length > 0 ?\n                                <Table className={classes.table} aria-label=\"products\">\n                                    <TableHead>\n                                        <TableRow>\n                                            <StyledTableCell align=\"right\">کد محصول</StyledTableCell>\n                                            <StyledTableCell align=\"right\">نام محصول</StyledTableCell>\n                                            <StyledTableCell align=\"right\">حداکثر فروش</StyledTableCell>\n                                            <StyledTableCell align=\"right\">تعداد موجود</StyledTableCell>\n                                            <StyledTableCell align=\"right\">تاریخ ثبت محصول</StyledTableCell>\n                                            <StyledTableCell align=\"right\">نوع محصول</StyledTableCell>\n                                            <StyledTableCell align=\"right\"/>\n                                            <StyledTableCell align=\"right\"/>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        {\n                                            data.data.merchandises.map((row) => (\n                                                <StyledTableRow key={row.id}>\n                                                    <StyledTableCell align=\"right\" component=\"th\" scope=\"row\">\n                                                        {row.unique_code}\n                                                    </StyledTableCell>\n\n                                                    <StyledTableCell align=\"right\">\n                                                        {row.title}\n                                                    </StyledTableCell>\n\n                                                    <StyledTableCell align=\"right\">\n                                                        {toFaDigit(row.order_counter.toString())}\n                                                    </StyledTableCell>\n\n                                                    <StyledTableCell align=\"right\">\n                                                        {toFaDigit(row.stock_number.toString())}\n                                                    </StyledTableCell>\n\n                                                    <StyledTableCell align=\"right\">\n                                                        {toFaDigit(moment.unix(row.create_date).locale('fa').format(\"jYYYY/jM/jD\"))}\n                                                    </StyledTableCell>\n\n                                                    <StyledTableCell align=\"right\">\n                                                        {row.merchandise_type === \"1\" ? \"آماده در انبار\" : \"پس از سفارش\"}\n                                                    </StyledTableCell>\n\n                                                    <StyledTableCell align=\"right\">\n                                                        <ItemLink text={'ویرایش'} to={{\n                                                            pathname: `/admin/dashboard/product`,\n                                                            search: `?id=${row.id}&code=${row.unique_code}`,\n                                                            state: row\n                                                        }}>\n                                                            <IconButton>\n\n                                                                <SvgIcon xmlns=\"http://www.w3.org/2000/svg\"\n                                                                         width=\"17.648\"\n                                                                         height=\"17.5\"\n                                                                         viewBox=\"0 0 17.648 17.5\">\n                                                                    <g id=\"edit\" transform=\"translate(-1.25 -1.129)\">\n                                                                        <path id=\"Path_2582\" data-name=\"Path 2582\"\n                                                                              d=\"M9.157,4H3.59A1.59,1.59,0,0,0,2,5.59V16.723a1.59,1.59,0,0,0,1.59,1.59H14.723a1.59,1.59,0,0,0,1.59-1.59V11.157\"\n                                                                              transform=\"translate(0 -0.434)\"\n                                                                              fill=\"none\"\n                                                                              stroke=\"#434343\" strokeLinecap=\"round\"\n                                                                              strokeLinejoin=\"round\" strokeWidth=\"1.5\"/>\n                                                                        <path id=\"Path_2583\" data-name=\"Path 2583\"\n                                                                              d=\"M16.349,2.373a1.687,1.687,0,0,1,2.386,2.386l-7.554,7.554L8,13.108l.8-3.181Z\"\n                                                                              transform=\"translate(-1.229)\" fill=\"none\"\n                                                                              stroke=\"#434343\"\n                                                                              strokeLinecap=\"round\"\n                                                                              strokeLinejoin=\"round\"\n                                                                              strokeWidth=\"1.5\"/>\n                                                                    </g>\n                                                                </SvgIcon>\n\n                                                                <Typography\n                                                                    style={{\n                                                                        color: '#434343',\n                                                                        fontSize: '14px',\n                                                                        fontFamily: 'Shabnam',\n                                                                        margin: '8px 8px'\n                                                                    }}\n                                                                    component={'span'}\n                                                                >ویرایش\n                                                                </Typography>\n\n                                                            </IconButton>\n\n                                                        </ItemLink>\n                                                    </StyledTableCell>\n                                                    <StyledTableCell align=\"right\">\n                                                        <IconButton onClick={() => {\n                                                            setDeleteDialog({\n                                                                open: true,\n                                                                id: row.id,\n                                                            })\n                                                        }}>\n\n                                                            <SvgIcon xmlns=\"http://www.w3.org/2000/svg\" width=\"15.9\"\n                                                                     height=\"17.5\"\n                                                                     viewBox=\"0 0 15.9 17.5\">\n                                                                <g id=\"trash-2\" transform=\"translate(-2.25 -1.25)\">\n                                                                    <path id=\"Path_2584\" data-name=\"Path 2584\"\n                                                                          d=\"M3,6H17.4\"\n                                                                          transform=\"translate(0 -0.8)\" fill=\"none\"\n                                                                          stroke=\"#f16522\"\n                                                                          strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                                                          strokeWidth=\"1.5\"/>\n                                                                    <path id=\"Path_2585\" data-name=\"Path 2585\"\n                                                                          d=\"M16.2,5.2V16.4A1.6,1.6,0,0,1,14.6,18h-8A1.6,1.6,0,0,1,5,16.4V5.2m2.4,0V3.6A1.6,1.6,0,0,1,9,2h3.2a1.6,1.6,0,0,1,1.6,1.6V5.2\"\n                                                                          transform=\"translate(-0.4)\" fill=\"none\"\n                                                                          stroke=\"#f16522\"\n                                                                          strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                                                          strokeWidth=\"1.5\"/>\n                                                                    <line id=\"Line_26\" data-name=\"Line 26\" y2=\"4.8\"\n                                                                          transform=\"translate(8.6 9.2)\" fill=\"none\"\n                                                                          stroke=\"#f16522\"\n                                                                          strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                                                          strokeWidth=\"1.5\"/>\n                                                                    <line id=\"Line_27\" data-name=\"Line 27\" y2=\"4.8\"\n                                                                          transform=\"translate(11.8 9.2)\" fill=\"none\"\n                                                                          stroke=\"#f16522\"\n                                                                          strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                                                          strokeWidth=\"1.5\"/>\n                                                                </g>\n                                                            </SvgIcon>\n\n                                                            <Typography\n                                                                style={{\n                                                                    color: '#F16522',\n                                                                    fontSize: '14px',\n                                                                    fontFamily: 'Shabnam',\n                                                                    margin: '8px 8px'\n                                                                }}\n                                                                component={'span'}\n                                                            >حذف\n                                                            </Typography>\n\n                                                        </IconButton>\n                                                    </StyledTableCell>\n                                                </StyledTableRow>\n                                            ))}\n\n                                    </TableBody>\n                                </Table> : null\n                        }\n\n                    </TableContainer>\n            }\n\n            {\n                loading\n                    ? null\n                    : data.data.merchandises.length > 0\n                    ? <TablePaginationActions numPages={numPages} page={page} onChange={handleChangePages}/>\n                    : null\n            }\n            <DeleteDialog\n                onClose={onCloseDialog}\n                open={deleteDialog.open}\n                title={'حذف محصول'}\n                deleteHandler={deleteHandler}\n            />\n\n        </div>\n    )\n\n}\n\nexport default ProductsSection","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/WebsiteManagement.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/Discount.js",["353"],"import React, {useEffect, useState} from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport {Button, CardContent, CardHeader, Grid, InputAdornment, Typography,CircularProgress} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport DateFormat from './DateFormat'\nimport {useStyle} from \"./Styles/DiscountStyle\";\nimport {DecimalInput} from \"react-hichestan-numberinput\";\nimport moment from \"jalali-moment\";\nimport {useAxios} from \"../../utills/Hooks/useAxios\";\nimport {useHistory, useLocation} from \"react-router-dom\"\nimport PropTypes from \"prop-types\";\nimport toFaDigit from \"../../utills/ToFaDigit\";\n\nfunction Discount(props) {\n    const classes = useStyle()\n    const location = useLocation()\n    const history = useHistory()\n    const {edit} = props\n    const [loading, setLoading] = useState(false)\n    const [values, setValues] = React.useState({\n        code: '',\n        percent: '0',\n        date: '',\n        usage: '',\n    })\n\n    const [, postDiscount] = useAxios({\n        url: '/admin/discount_mng/create',\n        method: 'POST',\n    }, {manual: true})\n    const [, pathDiscount] = useAxios({\n        url: '/admin/discount_mng/update',\n        method: 'PATCH',\n    }, {manual: true})\n\n    const handleChange = (value) => (event) => {\n        setValues(prevState => {\n            return {\n                ...prevState,\n                [value]: event.target.value,\n            }\n        })\n    }\n    const handleSubmit = async () => {\n        setLoading(true)\n        try {\n            if (values.code !== '') {\n                await postDiscount({\n                    data: {\n                        \"code\": values.code,\n                        \"expire_date\": moment(values.date, 'jDD/jMM/jYYYY').unix(),\n                        \"discount_percent\": parseInt(values.percent) / 100,\n                        \"usage_capacity\": parseInt(values.usage)\n                    }\n                })\n            } else {\n                await postDiscount({\n                    data: {\n                        \"expire_date\": moment(values.date, 'jDD/jMM/jYYYY').unix(),\n                        \"discount_percent\": parseInt(values.percent) / 100,\n                        \"usage_capacity\": parseInt(values.usage)\n                    }\n                })\n            }\n\n        } catch (err) {\n        }\n        setLoading(false)\n        history.push('/admin/dashboard/campaigns')\n    }\n    const handleEdit = async () => {\n        setLoading(true)\n        try {\n            await pathDiscount({\n                data: {\n                    \"id\": location.state.id,\n                    \"expire_date\": moment(values.date, 'jDD/jMM/jYYYY').unix(),\n                    \"discount_percent\": parseInt(values.percent) / 100,\n                    \"usage_capacity\": parseInt(values.usage)\n                }\n            })\n\n        } catch (err) {\n        }\n        setLoading(false)\n        history.push('/admin/dashboard/campaigns')\n    }\n\n    useEffect(() => {\n        if (edit) {\n            const discount = location.state\n            setValues(prevState => {\n                return {\n                    ...prevState,\n                    code: discount.code,\n                    percent: (discount.discount_percent * 100).toString(),\n                    date: moment.unix(discount.expire_date).format(\"jDD/jMM/jYYYY\"),\n                    usage: (discount.usage_capacity).toString(),\n                }\n            })\n        }\n    }, [edit, location.state])\n\n\n    const discountItems = [\n        {title: 'کد تخفیف', id: 'discountCode',},\n        {title: 'میزان تخفیف', id: 'discountPercent',},\n        {title: 'تاریخ انقضا', id: 'discountExpressionDate',},\n        {title: 'تعداد استفاده', id: 'usageCapacity',}\n    ]\n\n    return (\n        <>\n            <Card>\n                <CardHeader\n                    title={<Typography className={classes.title}>ساخت کد تخفیف جدید</Typography>}\n                />\n                <CardContent>\n                    <Grid container spacing={2}>\n                        {\n                            discountItems.map((item) => (\n                                <Grid item xs={12} md={6}>\n                                    <Typography className={classes.label}>{item.title}</Typography>\n                                    {\n                                        item.id === 'discountCode' ||\n                                        item.id === 'usageCapacity' ?\n                                            <TextField\n                                                id={item.id}\n                                                fullWidth\n                                                value={item.id === 'discountCode' ? values.code : values.usage}\n                                                onChange={handleChange(item.id === 'discountCode' ? 'code' : 'usage')}\n                                                margin={'normal'}\n                                                InputProps={{\n                                                    classes: {\n                                                        input: classes.textField\n                                                    },\n                                                    style: {\n                                                        direction: 'ltr'\n                                                    }\n                                                }}\n                                                variant=\"outlined\"\n                                            />\n\n                                            :\n                                            item.id === 'discountExpressionDate' ?\n                                                <TextField\n                                                    id={item.id}\n                                                    fullWidth\n                                                    value={values.date}\n                                                    helperText={moment().format('jDD/jMM/jYYYY')}\n                                                    onChange={handleChange('date')}\n                                                    margin={'normal'}\n                                                    InputProps={{\n                                                        classes: {\n                                                            input: classes.textField\n                                                        },\n                                                        inputComponent: DateFormat\n                                                    }}\n                                                    FormHelperTextProps={{\n                                                        style: {\n                                                            fontFamily: 'Shabnam',\n                                                            fontSize: 12,\n                                                            textAlign: 'left'\n                                                        }\n                                                    }}\n                                                    variant=\"outlined\"\n                                                />\n                                                :\n                                                <TextField //percent\n                                                    id={item.id}\n                                                    fullWidth\n                                                    value={values.percent}\n                                                    onChange={handleChange('percent')}\n                                                    placeholder={'0'}\n                                                    margin={'normal'}\n                                                    InputProps={{\n                                                        classes: {\n                                                            input: classes.textField,\n                                                            adornedStart: classes.textField,\n                                                        },\n                                                        style: {\n                                                            direction: 'ltr',\n                                                        },\n                                                        inputComponent: DecimalInput,\n                                                        startAdornment: <InputAdornment\n                                                            position={\"start\"}>%</InputAdornment>\n                                                    }}\n                                                    variant=\"outlined\"\n                                                />\n                                    }\n                                </Grid>\n                            ))\n\n                        }\n                    </Grid>\n                </CardContent>\n            </Card>\n            <div style={{position: 'relative', display: 'flex', float: 'left'}}>\n                {\n                    edit\n                        ?\n                        <Button disabled={loading} onClick={handleEdit} className={classes.save} variant={\"contained\"}>ویرایش\n                            کد\n                            تخفیف</Button>\n                        :\n                        <Button disabled={loading} onClick={handleSubmit} className={classes.save}\n                                variant={\"contained\"}>ثبت\n                            کد تخفیف</Button>\n                }\n                {loading && <CircularProgress size={38} className={classes.buttonProgress}/>}\n            </div>\n\n        </>\n    )\n}\n\nDiscount.propTypes = {\n    edit: PropTypes.bool.isRequired,\n};\n\nexport default Discount","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/OrdersDetail.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/CampaignSection.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Category/CategorySection.js",["354","355","356"],"import React, {useEffect, useState} from \"react\";\nimport {Button, IconButton, Paper, SvgIcon, TableBody, TableContainer, Typography} from \"@material-ui/core\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport AddCategoryDialog from \"./AddCategoryDialog\";\nimport TablePaginationActions from \"../Table/Components/TablePaginationActions\";\nimport {StyledTableCell} from \"../Table/Styles/StyledTableCell\";\nimport {StyledTableRow} from \"../Table/Styles/StyledTableRow\";\nimport {useAxios} from \"../../utills/Hooks/useAxios\";\nimport {toFaDigit} from \"../../utills/ToFaDigit\";\nimport {Skeleton} from \"@material-ui/lab\"\nimport moment from \"jalali-moment\";\nimport DeleteDialog from \"../Public/DeleteDialog\";\n\nconst useStyles = makeStyles((theme) => ({\n    table: {\n        width: '100%',\n    },\n    paper: {\n        paddingTop: theme.spacing(0)\n    },\n    title: {\n        fontFamily: 'Shabnam',\n        color: '#434343',\n        fontSize: 20,\n        fontWeight: \"bold\",\n        margin: theme.spacing(3, 3),\n        float: \"right\"\n    },\n    export: {\n        margin: theme.spacing(1, 3, 3),\n        float: \"left\"\n    },\n    addProduct: {\n        margin: theme.spacing(2, 3),\n        float: \"left\",\n        backgroundColor: '#F16522',\n        color: 'white',\n        fontSize: '16px',\n        fontFamily: 'Shabnam',\n        fontWeight: \"bold\",\n        '&:hover': {\n            backgroundColor: '#F16522',\n            opacity: '70%'\n        },\n    },\n    pageButton: {\n\n        color: 'white',\n        fontSize: '16px',\n        fontFamily: 'Shabnam',\n        fontWeight: \"bold\",\n        height: 40,\n        width: 40,\n        borderRadius: 7,\n        marginLeft: theme.spacing(1),\n        '&:hover': {\n            backgroundColor: '#F16522',\n            opacity: '70%'\n        },\n    },\n    buttonGroup: {\n        margin: theme.spacing(4, 3, 10, 0),\n        float: \"left\"\n    },\n    loading: {\n        color: '#F16522',\n        direction: 'rtl',\n        position: 'absolute',\n        top: '81px',\n        right: 'auto',\n        width: '82.5%',\n    },\n}), {index: 1});\n\n\nfunction createData(id, name, create_date) {\n    return {id, name, create_date};\n}\n\n\nfunction CategorySection() {\n    const classes = useStyles();\n    const [page, setPage] = useState(0)\n    const [{response, loading}, getCategories] = useAxios(\n        {\n            url: `/admin/category_mng/get_category?page=${page}`\n        }\n    )\n    const [{loading: postLoading}, postCategory] = useAxios(\n        {\n            url: `/admin/category_mng/create_category`,\n            method: 'POST'\n        },\n        {manual: true}\n    )\n    const [{loading: pathLoading}, updateCategory] = useAxios(\n        {\n            url: `/admin/category_mng/update_category`,\n            method: 'PATCH'\n        },\n        {manual: true}\n    )\n    const [{loading: deleteLoading}, deleteCategory] = useAxios(\n        {\n            url: `/admin/category_mng/delete_category`,\n            method: 'DELETE'\n        },\n        {manual: true}\n    )\n\n    const [selectedCategory, setSelectedCategory] = useState(createData('', '', ''))\n\n\n    const [openAddDialog, setOpenAddDialog] = useState(false)\n    const [openEditDialog, setOpenEditDialog] = useState(false)\n    const [deleteDialog, setDeleteDialog] = useState({\n        open: false,\n        id: null,\n    })\n\n    let numPages = 0\n    if (response !== undefined)\n        numPages = parseInt(((response.data.data.pages)).toString()) + 1\n\n    const handleChangePages = (pageNumber) => {\n        setPage(pageNumber)\n    }\n    const addCategoryClick = () => {\n        setOpenAddDialog(true)\n    }\n\n    const addCategory = (category) => {\n        postCategory({\n            data: {\n                \"name\": `${category}`\n            }\n        }).then(res => {\n            console.log(res)\n            getCategories()\n        }).catch(err => {\n            console.log(err)\n        })\n        setOpenAddDialog(false)\n    }\n\n\n    const editCategory = (category) => {\n        if (selectedCategory.name !== category) {\n            updateCategory({\n                data: {\n                    \"id\": `${selectedCategory.id}`,\n                    \"name\": `${category}`,\n                }\n            }).then(res => {\n                console.log(res)\n                getCategories()\n            }).catch(err => {\n                console.log(err)\n            })\n        }\n        setOpenEditDialog(false)\n    }\n\n\n    const deleteCategoryHandler = async() => {\n        await deleteCategory({\n            data: {\n                \"id\": `${deleteDialog.id}`\n            }\n        }).then(res => {\n            getCategories()\n            setDeleteDialog({\n                open: false,\n                id: null,\n            })\n        }).catch(err => {\n        })\n    }\n\n    useEffect(() => {\n        getCategories()\n\n    }, [getCategories])\n\n\n    const onCloseDialog = () => {\n        setOpenAddDialog(false)\n        setOpenEditDialog(false)\n        setDeleteDialog({\n            ...deleteDialog,\n            open: false,\n        })\n    }\n\n    return (\n        <div>\n\n            {\n                loading ? <Skeleton variant={\"rect\"} width={'100%'} height={500}/>\n                    : <TableContainer component={Paper}>\n                        <Typography className={classes.title} component={\"span\"}>دسته بندی ها</Typography>\n                        <Button\n                            dir={'ltr'}\n                            className={classes.addProduct}\n                            variant={\"contained\"}\n                            onClick={addCategoryClick}\n                            endIcon={<AddCircleOutlineIcon/>}\n                        >\n                            ساخت دسته بندی جدید\n                        </Button>\n                        <Table className={classes.table} aria-label=\"category\">\n                            <TableHead>\n                                <TableRow>\n                                    <StyledTableCell align=\"right\">نام دسته‌بندی</StyledTableCell>\n                                    <StyledTableCell align=\"right\">تاریخ ایجاد</StyledTableCell>\n                                    <StyledTableCell align=\"right\"/>\n                                    <StyledTableCell align=\"right\"/>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {\n                                    response.data.data.categories\n                                        .map((row) => (\n                                            <StyledTableRow key={row.id}>\n                                                <StyledTableCell align=\"right\">{row.name}</StyledTableCell>\n                                                <StyledTableCell align=\"right\">\n                                                    {toFaDigit(moment.unix(row.create_date).format(\"jYYYY/jM/jD\"))}\n                                                </StyledTableCell>\n\n                                                <StyledTableCell align=\"right\">\n                                                    <IconButton\n                                                        onClick={() => {\n                                                            setSelectedCategory(() => {\n                                                                return row\n                                                            })\n                                                            setOpenEditDialog(true)\n                                                        }}\n                                                    >\n                                                        <SvgIcon xmlns=\"http://www.w3.org/2000/svg\" width=\"17.648\"\n                                                                 height=\"17.5\"\n                                                                 viewBox=\"0 0 17.648 17.5\">\n                                                            <g id=\"edit\" transform=\"translate(-1.25 -1.129)\">\n                                                                <path id=\"Path_2582\" data-name=\"Path 2582\"\n                                                                      d=\"M9.157,4H3.59A1.59,1.59,0,0,0,2,5.59V16.723a1.59,1.59,0,0,0,1.59,1.59H14.723a1.59,1.59,0,0,0,1.59-1.59V11.157\"\n                                                                      transform=\"translate(0 -0.434)\" fill=\"none\"\n                                                                      stroke=\"#434343\" strokeLinecap=\"round\"\n                                                                      strokeLinejoin=\"round\" strokeWidth=\"1.5\"/>\n                                                                <path id=\"Path_2583\" data-name=\"Path 2583\"\n                                                                      d=\"M16.349,2.373a1.687,1.687,0,0,1,2.386,2.386l-7.554,7.554L8,13.108l.8-3.181Z\"\n                                                                      transform=\"translate(-1.229)\" fill=\"none\"\n                                                                      stroke=\"#434343\"\n                                                                      strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                                                      strokeWidth=\"1.5\"/>\n                                                            </g>\n                                                        </SvgIcon>\n                                                        <Typography\n                                                            style={{\n                                                                color: '#434343',\n                                                                fontSize: '14px',\n                                                                fontFamily: 'Shabnam',\n                                                                margin: '8px 8px'\n                                                            }}\n                                                            component={'span'}\n                                                        >ویرایش\n                                                        </Typography>\n                                                    </IconButton>\n                                                </StyledTableCell>\n\n                                                <StyledTableCell align=\"right\">\n                                                    <IconButton\n                                                        onClick={() => {\n                                                            setDeleteDialog({\n                                                                open: true,\n                                                                id: row.id,\n                                                            })\n                                                        }}\n                                                    >\n\n                                                        <SvgIcon xmlns=\"http://www.w3.org/2000/svg\" width=\"15.9\"\n                                                                 height=\"17.5\"\n                                                                 viewBox=\"0 0 15.9 17.5\">\n                                                            <g id=\"trash-2\" transform=\"translate(-2.25 -1.25)\">\n                                                                <path id=\"Path_2584\" data-name=\"Path 2584\" d=\"M3,6H17.4\"\n                                                                      transform=\"translate(0 -0.8)\" fill=\"none\"\n                                                                      stroke=\"#f16522\"\n                                                                      strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                                                      strokeWidth=\"1.5\"/>\n                                                                <path id=\"Path_2585\" data-name=\"Path 2585\"\n                                                                      d=\"M16.2,5.2V16.4A1.6,1.6,0,0,1,14.6,18h-8A1.6,1.6,0,0,1,5,16.4V5.2m2.4,0V3.6A1.6,1.6,0,0,1,9,2h3.2a1.6,1.6,0,0,1,1.6,1.6V5.2\"\n                                                                      transform=\"translate(-0.4)\" fill=\"none\"\n                                                                      stroke=\"#f16522\"\n                                                                      strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                                                      strokeWidth=\"1.5\"/>\n                                                                <line id=\"Line_26\" data-name=\"Line 26\" y2=\"4.8\"\n                                                                      transform=\"translate(8.6 9.2)\" fill=\"none\"\n                                                                      stroke=\"#f16522\"\n                                                                      strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                                                      strokeWidth=\"1.5\"/>\n                                                                <line id=\"Line_27\" data-name=\"Line 27\" y2=\"4.8\"\n                                                                      transform=\"translate(11.8 9.2)\" fill=\"none\"\n                                                                      stroke=\"#f16522\"\n                                                                      strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                                                      strokeWidth=\"1.5\"/>\n                                                            </g>\n                                                        </SvgIcon>\n                                                        <Typography\n                                                            style={{\n                                                                color: '#F16522',\n                                                                fontSize: '14px',\n                                                                fontFamily: 'Shabnam',\n                                                                margin: '8px 8px'\n                                                            }}\n                                                            component={'span'}\n                                                        >حذف\n                                                        </Typography>\n                                                    </IconButton>\n                                                </StyledTableCell>\n\n                                            </StyledTableRow>\n                                        ))}\n\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n            }\n\n            <AddCategoryDialog\n                onClose={onCloseDialog}\n                add={addCategory}\n                open={openAddDialog}\n                title={'ایجاد دسته‌بندی جدید'}\n                defaultValue={''}\n            />\n\n            <AddCategoryDialog\n                onClose={onCloseDialog}\n                add={editCategory}\n                open={openEditDialog}\n                title={'ویرایش دسته بندی'}\n                defaultValue={selectedCategory.name}\n            />\n            <DeleteDialog\n                onClose={onCloseDialog}\n                open={deleteDialog.open}\n                title={'حذف دسته بندی'}\n                deleteHandler={deleteCategoryHandler}\n            />\n\n            {!loading && <TablePaginationActions numPages={numPages} page={page} onChange={handleChangePages}/>}\n        </div>\n    )\n}\n\nexport default CategorySection","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Comments/CommentsSection.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/login/Style.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/OrdersSection.js",["357"],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Fiance/FianceSection.js",["358","359","360"],"import React, {useEffect, useState} from \"react\";\nimport {Button, CircularProgress, Grid, IconButton, Link, SvgIcon, Typography} from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {DecimalInput} from \"react-hichestan-numberinput\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport {useStyle} from \"./Style\";\nimport {useAxios} from \"../../utills/Hooks/useAxios\";\nimport {separateDigit} from \"../../utills/ToFaDigit\";\n\nfunction FianceSection() {\n    const classes = useStyle()\n    const [values, setValues] = useState({giftDelivery: 0, freeDelivery: 0})\n    const [loading, setLoading] = useState(false)\n    const handleChange = (props) => (event) => {\n        setValues({...values, [props]: event.target.value})\n    }\n    const [{data: indexData, loading: indexLoading}, ] = useAxios({\n        url: '/admin/financial_mng',\n    })\n    const [{response: freeDeliveryResponse}, getFreeDelivery] = useAxios({\n        url: '/admin/financial_mng/transmission_lb/get',\n    })\n    const [{response: giftDeliveryResponse}, getGiftDelivery] = useAxios({\n        url: '/admin/financial_mng/gift_lb/get'\n    })\n    const [, updateFreeDelivery] = useAxios({\n        url: '/admin/financial_mng/transmission_lb/update',\n        method: \"PATCH\"\n    }, {manual: true})\n\n    const [, updateGiftDelivery] = useAxios({\n        url: '/admin/financial_mng/gift_lb/update',\n        method: \"PATCH\"\n    }, {manual: true})\n\n    useEffect(() => {\n        if(!indexLoading){\n            document.getElementById('gift-prefix').children[0]\n                .style.fontFamily = 'Shabnam'\n            document.getElementById('gift-prefix').children[0]\n                .style.fontSize = '14px'\n            document.getElementById('free-prefix').children[0]\n                .style.fontFamily = 'Shabnam'\n            document.getElementById('free-prefix').children[0]\n                .style.fontSize = '14px'\n        }\n    }, [indexLoading])\n\n\n    useEffect(() => {\n        if (freeDeliveryResponse !== undefined && giftDeliveryResponse !== undefined) {\n            console.log(freeDeliveryResponse)\n            setValues({\n                giftDelivery: giftDeliveryResponse.data.data.lb,\n                freeDelivery: freeDeliveryResponse.data.data.lb\n            })\n        }\n    }, [freeDeliveryResponse, giftDeliveryResponse])\n\n\n    const submitHandler = async () => {\n        try {\n            setLoading(true)\n            await updateFreeDelivery({\n                data: {\n                    \"lb\": values.freeDelivery,\n                }\n            })\n            await updateGiftDelivery({\n                data: {\n                    \"lb\": values.giftDelivery\n                }\n            })\n            getFreeDelivery()\n            getGiftDelivery()\n        } catch (err) {\n        }\n        setLoading(false)\n    }\n    if (indexLoading){\n        return null\n    }\n    return (\n        <Grid container spacing={3}>\n            <Grid xs={12}>\n                <div className={classes.header}>\n                    <Typography className={classes.title}>امور مالی</Typography>\n                </div>\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n                <Paper elevation={3} className={classes.incomes}>\n                    <Typography className={classes.label}>درآمد روزانه</Typography>\n                    <Typography className={classes.toman}>{separateDigit(indexData.data.daily_revenue)} تومان</Typography>\n                </Paper>\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n                <Paper elevation={3} className={classes.incomes}>\n                    <Typography className={classes.label}>درآمد ماهانه</Typography>\n                    <Typography className={classes.toman}>{separateDigit(indexData.data.monthly_revenue)} تومان</Typography>\n                </Paper>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <Paper elevation={3} className={classes.incomes}>\n                    <Typography className={classes.label}>درآمد هفتگی</Typography>\n                    <Typography className={classes.toman}>{separateDigit(indexData.data.weekly_revenue)} تومان</Typography>\n                </Paper>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <Paper elevation={3} className={classes.incomes}>\n                    <Typography className={classes.label}>درآمد سالانه</Typography>\n                    <Typography className={classes.toman}>{separateDigit(indexData.data.yearly_revenue)} تومان</Typography>\n                </Paper>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <Paper elevation={3} className={classes.delivery}>\n                    <Typography className={classes.title}>ارسال رایگان</Typography>\n                    <Typography style={{marginRight: 14}} className={classes.subTitle}>حداقل مبلغ سبدخرید</Typography>\n                    <div style={{margin: '12px 24px 24px 24px'}}>\n                        <TextField\n                            id={'free-delivery'}\n                            value={values.freeDelivery}\n                            onChange={handleChange('freeDelivery')}\n                            margin={'normal'}\n                            fullWidth\n                            InputProps={{\n                                classes: {\n                                    input: classes.textField\n                                },\n                                style: {\n                                    direction: 'ltr'\n                                },\n                                inputComponent: DecimalInput,\n                                startAdornment: <InputAdornment id={'free-prefix'} classes={classes.textField}\n                                                                position=\"start\">تومان</InputAdornment>,\n                            }}\n                            variant=\"outlined\"\n                        />\n                    </div>\n\n                </Paper>\n            </Grid>\n            <Grid item xs={12} md={6}>\n                <Paper elevation={3} className={classes.delivery}>\n                    <Typography className={classes.title}>ارسال هدیه</Typography>\n                    <Typography style={{marginRight: 14}} className={classes.subTitle}>حداقل مبلغ سبدخرید</Typography>\n                    <div style={{margin: '12px 24px 24px 24px'}}>\n                        <TextField\n                            id={'gift-delivery'}\n                            value={values.giftDelivery}\n                            onChange={handleChange('giftDelivery')}\n                            margin={'normal'}\n                            fullWidth\n                            InputProps={{\n                                classes: {\n                                    input: classes.textField\n                                },\n                                style: {\n                                    direction: 'ltr'\n                                },\n                                inputComponent: DecimalInput,\n                                startAdornment: <InputAdornment id={'gift-prefix'} classes={classes.textField}\n                                                                position=\"start\">تومان</InputAdornment>,\n                            }}\n                            variant=\"outlined\"\n                        />\n                    </div>\n                </Paper>\n            </Grid>\n            <Grid xs={0} md={9}/>\n            <Grid style={{position: 'relative',}} xs={12} item md={3}>\n                <Button disabled={loading} onClick={submitHandler} fullWidth className={classes.save}\n                        variant={\"contained\"}>ثبت اطلاعات</Button>\n                {loading && <CircularProgress size={38} className={classes.buttonProgress}/>}\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default FianceSection\n","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Comments/CommentsList.js",["361"],"import React, {useEffect, useState} from \"react\";\nimport {Backdrop, CircularProgress, Grid, Typography} from \"@material-ui/core\";\nimport CommentCard from \"./CommentCard\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport TablePaginationActions from \"../Table/Components/TablePaginationActions\";\nimport useAllCommentsData from \"./Actions/useAllCommentsData\";\nimport {useHistory} from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        fontFamily: 'Shabnam',\n        color: '#434343',\n        fontSize: 20,\n        fontWeight: \"bold\",\n        float: \"right\"\n    },\n    backdrop: {\n        zIndex: theme.zIndex.drawer + 1,\n        color:'#F16522'\n    }\n}), {index: 1});\n\nfunction CommentsList({location}) {\n    const classes = useStyles();\n    const history = useHistory()\n    const queryParams = new URLSearchParams(location.search)\n    const sortStatus = queryParams.get('new') === 'true'\n    const title = sortStatus ? 'نظرات جدید' : 'همه نظرات'\n    const [page, setPage] = useState(0)\n    const [fetch, setFetch] = useState(true)\n    const [loading, result] = useAllCommentsData(fetch, page, sortStatus)\n\n\n    const handleChangePages = (pageNumber) => {\n        setPage(pageNumber)\n        refresh()\n    }\n\n    useEffect(() => {\n        if (!loading && result.pages !== -1){\n            if(result.comments.length === 0){\n                history.push('/admin/dashboard/comments')\n            }\n            setFetch(false)\n        }\n    }, [loading, result])\n\n    const refresh = () => {\n        setFetch(true)\n    }\n\n\n    return (\n        <>\n            <Backdrop className={classes.backdrop} open={loading}>\n                <CircularProgress size={70} color=\"inherit\"/>\n            </Backdrop>\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <Typography className={classes.title}>{title}</Typography>\n                </Grid>\n                {\n                    result.comments.map((comment) => (\n                        <Grid key={Math.round(comment.create_date)} item xs={12}>\n                            <CommentCard comment={comment} refresh={refresh}/>\n                        </Grid>\n                    ))\n                }\n                <Grid item xs={12}>\n                    {!loading &&\n                    <TablePaginationActions numPages={result.pages} page={page} onChange={handleChangePages}/>}\n                </Grid>\n            </Grid>\n        </>\n    )\n}\n\nexport default CommentsList","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardForms/DashboardLayout.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/Product.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Account/Account.js",["362"],"import React, {useState} from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport {Button, CardContent, CardHeader, Grid, Typography} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport {useStyle} from \"./Style\";\nimport {useAxios} from \"../../utills/Hooks/useAxios\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\n\nfunction Account() {\n    const classes = useStyle()\n    const [value, setValue] = useState({\n        password: '',\n        rePassword: '',\n        showPassword: false\n    })\n    const textField = (id, defaultValue) => {\n        switch (id) {\n            case 'password':\n                return (<TextField\n                    dir={'ltr'}\n                    id={id}\n                    type={value.showPassword ? 'text' : 'password'}\n                    fullWidth\n                    value={value.password}\n                    onChange={handleChange('password')}\n                    margin={'normal'}\n                    InputProps={{\n                        classes: {\n                            input: classes.textField\n                        },\n                        endAdornment:\n                            <InputAdornment position=\"end\">\n                                <IconButton\n                                    aria-label=\"toggle password visibility\"\n                                    onClick={handleClickShowPassword}\n                                    onMouseDown={handleMouseDownPassword}\n                                    edge=\"end\"\n                                >\n                                    {value.showPassword ? <Visibility/> : <VisibilityOff/>}\n                                </IconButton>\n                            </InputAdornment>\n                    }}\n                    variant=\"outlined\"\n                />)\n            case 'new-password':\n                return (\n                    <TextField\n                        dir={'ltr'}\n                        id={id}\n                        type={value.showPassword ? 'text' : 'password'}\n                        fullWidth\n                        value={value.rePassword}\n                        onChange={handleChange('rePassword')}\n                        margin={'normal'}\n\n                        InputProps={{\n                            classes: {\n                                input: classes.textField\n                            },\n                            endAdornment:\n                                <InputAdornment position=\"end\">\n                                    <IconButton\n                                        aria-label=\"toggle password visibility\"\n                                        onClick={handleClickShowPassword}\n                                        onMouseDown={handleMouseDownPassword}\n                                        edge=\"end\"\n                                    >\n                                        {value.showPassword ? <Visibility/> : <VisibilityOff/>}\n                                    </IconButton>\n                                </InputAdornment>\n                        }}\n                        variant=\"outlined\"\n                    />\n                )\n            case 'email':\n                return (\n                    <TextField\n                        dir={'ltr'}\n                        id={id}\n                        fullWidth\n                        defaultValue={defaultValue}\n                        margin={'normal'}\n                        InputProps={{\n                            classes: {\n                                style: {\n                                    direction: 'ltr'\n                                },\n                                input: classes.textField\n                            }\n                        }}\n                        variant=\"outlined\"\n                    />\n                )\n            default:\n                return (<>\n                    <TextField\n                        id={id}\n                        fullWidth\n                        defaultValue={defaultValue}\n                        margin={'normal'}\n                        InputProps={{\n                            classes: {\n                                input: classes.textField\n                            }\n                        }}\n                        variant=\"outlined\"\n                    />\n                </>)\n        }\n    }\n\n    const [{response, loading}, fetch] = useAxios({\n            url: '/user/get_profile',\n        }\n    )\n\n\n    if(loading)\n        return <LinearProgress className={classes.loading}/>\n\n    const data = response.data.data\n\n    const accountItems = [\n        {title: 'نام و نام‌خانوادگی', id: 'name', defaultValue: data.name_and_last_name},\n        {title: 'شماره موبایل', id: 'mobile', defaultValue: data.mobile_number},\n        {title: 'رمز عبور', id: 'password', defaultValue: ''},\n        {title: 'رمز عبور جدید', id: 'new-password', defaultValue: ''}\n    ]\n    const handleChange = (props) => (event) => {\n        setValue({...value, [props]: event.target.value});\n    };\n\n    const handleClickShowPassword = () => {\n        setValue({...value, showPassword: !value.showPassword});\n    };\n\n    const handleMouseDownPassword = (event) => {\n        event.preventDefault();\n    };\n\n    return (\n        <>\n            <Card>\n                <CardHeader\n                    title={<Typography className={classes.title}>حساب کاربری</Typography>}\n                />\n                <CardContent>\n                    <Grid container spacing={2}>\n                        {\n                            accountItems.map((item) => (\n                                <Grid item xs={12} md={6}>\n                                    <Typography className={classes.label}>{item.title}</Typography>\n                                    {textField(item.id, item.defaultValue)}\n                                </Grid>\n                            ))\n\n                        }\n                    </Grid>\n                </CardContent>\n            </Card>\n            <Button className={classes.save} variant={\"contained\"}>ثبت اطلاعات</Button>\n        </>\n    )\n}\n\nexport default Account","/Users/tavallai/codes/JS/didartshop-dashboard/src/utills/ToFaDigit.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/Attributes.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/SocialNetwork.js",["363"],"import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport {CardContent, CardHeader, Grid, Typography} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {useStyle} from \"./Styles/SocialNetworkStyle\";\nimport PropTypes from \"prop-types\";\n\nconst socialNames = [\n    {label: 'آپارارت', id: 'aparat'},\n    {label: 'توییتر', id: 'twitter'},\n    {label: 'تلگرام', id: 'telegram'},\n    {label: 'اینستاگرام', id: 'instagram'},\n    {label: 'یوتیوب', id: 'youtube'},\n]\n\nfunction SocialNetwork(props) {\n    const classes = useStyle()\n    const {socialNetwork, setSocialNetwork} = props\n    const handleChangeValues = (id, value) => (event) => {\n        setSocialNetwork(prevState => {\n            prevState[id - 1] = {\n                ...prevState[id - 1],\n                [value]: event.target.value,\n            }\n            return [...prevState]\n        })\n    }\n\n\n    return (\n        <Card>\n            <CardHeader\n                title={<Typography className={classes.title}>شبکه های اجتماعی</Typography>}\n            />\n            <CardContent>\n                <Grid container>\n                    {socialNetwork.map((social) => (\n                        <Grid item md={3} xs={12}>\n                            <Typography className={classes.label}>{social.title}</Typography>\n                            <div className={classes.root}>\n                                <TextField\n                                    id={social.id}\n                                    placeholder={'آیدی شما'}\n                                    value={social.link}\n                                    onChange={handleChangeValues(social.id, \"link\")}\n                                    fullWidth\n                                    margin={'normal'}\n                                    InputProps={{\n                                        classes: {\n                                            input: classes.textField,\n                                        }\n                                    }}\n                                    variant=\"outlined\"\n                                />\n                            </div>\n                        </Grid>\n                    ))}\n                </Grid>\n            </CardContent>\n\n        </Card>\n    )\n}\n\nSocialNetwork.propTypes = {\n    socialNetwork: PropTypes.object.isRequired,\n    setSocialNetwork: PropTypes.func.isRequired,\n};\n\nexport default SocialNetwork","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/Sliders.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/useSettingData.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/DateFormat.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Account/Style.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/GetProductData.js",["364"],"import axios from \"axios\";\n\nasync function GetProductData() {\n    let params = (new URL(document.location)).searchParams;\n    const id = params.get(\"id\")\n    let data = {}\n    if (id !== null) {\n        const productData = await axios.get(\n            `https://api.didartshop.ir/admin/merchandise_mng/get_merchandise?id=${id}`,\n            {\n                headers: {\n                    'Authorization': localStorage.getItem('Authorization')\n                }\n            }\n        )\n\n\n        const setCampaign = (campaign) => {\n            let id = campaign === null ? null : campaign.id\n            switch (id) {\n                case 1:\n                    return {\n                        id: 1,\n                        value: \"کمپین ۱\",\n                        label: \"کمپین ۱\",\n                    }\n                case 2:\n                    return {\n                        id: 2,\n                        value: \"کمپین ۲\",\n                        label: \"کمپین ۲\",\n                    }\n                case 3: {\n                    return {\n                        id: 3,\n                        value: \"کمپین ۳\",\n                        label: \"کمپین ۳\",\n                    }\n                }\n                default:\n                    return {\n                        id: null,\n                        value: \"نا مشخص\",\n                        label: \"نا مشخص\",\n                    }\n            }\n        }\n        const setStockValues = (stock_list) => {\n            let stockValues = []\n            for (let i = 0; i < stock_list.length; i++) {\n                stockValues.push({\n                    color: stock_list[i].color,\n                    size: stock_list[i].size,\n                    count: stock_list[i].stock_number,\n                })\n            }\n            return stockValues\n        }\n\n        const merchandise = productData.data.data.merchandise\n\n        data = {\n            colorTags: new Set(merchandise.color_list),\n            sizeTags: new Set(merchandise.size_list),\n            productInfoValues: {\n                title: merchandise.title,\n                detail: merchandise.specification,\n                describe: merchandise.description,\n                price: merchandise.price,\n                discount:\n                    merchandise.percent_of_discount === null ? 0\n                        : merchandise.percent_of_discount * 100,\n            },\n            selectedCategory: merchandise.category,\n            selectedCampaign: setCampaign(merchandise.campaign),\n            tags: new Set(merchandise.tag_list),\n            stockValues: setStockValues(merchandise.stock_list),\n            stock_list: merchandise.stock_list,\n            afterOrderValue: merchandise.merchandise_type == 2 && merchandise.is_exist ? merchandise.stock_number : 0,\n            isExist: merchandise.is_exist,\n            productType: merchandise.merchandise_type,\n            preview_image: merchandise.preview_image,\n            other_images: merchandise.other_image_list,\n        }\n    }\n\n\n    return data\n}\n\nexport default GetProductData","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/EditImage.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/convertProductData.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/utills/Hooks/useAxios.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/Routes/Link/ItemLink.js",["365"],"import React from \"react\";\nimport {Link as RouterLink} from \"react-router-dom\";\nimport {Link} from \"@material-ui/core\";\nimport * as PropTypes from \"prop-types\";\nimport ListItemLink from \"./ListItemLink\";\n\n\nfunction ItemLink(props) {\n    const {text, to, children} = props;\n\n    const renderLink = React.useMemo(\n        () => React.forwardRef((itemProps, ref) =>\n                <RouterLink to={to} ref={ref} {...itemProps} />),\n        [to],\n    );\n\n    return (\n        <Link component={renderLink} color={\"inherit\"}>{children ? children : text}</Link>\n    );\n}\n\nItemLink.propTypes = {\n    text: PropTypes.string,\n    to: PropTypes.string.isRequired,\n    children: PropTypes.object,\n};\n\nexport default ItemLink","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/Styles/ProductSectionStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/Styles/ShowProductStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/Styles/WebsiteManagmentStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/Styles/DiscountStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Table/Components/TablePaginationActions.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Table/Styles/StyledTableRow.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Table/Styles/StyledTableCell.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/ProductCampaign.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/ProductTag.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/ProductCategory.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/ProductStock.js",["366"],"import React, {useEffect} from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport {CardContent, CardHeader, Divider, Grid, Typography} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport PropTypes from \"prop-types\";\nimport {StyledRadio, StyledSwitch, useStyle} from \"./Styles/ProductStockStyle\";\n\nfunction createData(color, size, count) {\n    return {color, size, count};\n\n}\n\nfunction ProductStock(props) {\n    const classes = useStyle()\n    const\n        {\n            colorTags, sizeTags,\n            stockValues, setStockValues,\n            afterOrderValue, setAfterOrderValue,\n            isExist, setIsExist,\n            productType, setProductType\n        } = props\n\n    const getCountBack = (color, size, products) => {\n        for (let i = 0; i < products.length; i++) {\n            if (products[i].color === color && products[i].size === size) {\n                return products[i].count\n            }\n        }\n        return 0\n    }\n\n\n    useEffect(() => {\n        if (colorTags.size !== 0 && sizeTags.size !== 0) {\n            let copy = stockValues\n            setStockValues([])\n            for (let i = 0; i < [...colorTags].length; i++) {\n                for (let j = 0; j < [...sizeTags].length; j++) {\n                    setStockValues(prevState => {\n                        return [...prevState,\n                            createData([...colorTags][i],\n                                [...sizeTags][j],\n                                getCountBack([...colorTags][i], [...sizeTags][j], copy)\n                            )]\n                    })\n                }\n            }\n\n        } else {\n            setStockValues([])\n        }\n    }, [colorTags, sizeTags])\n\n\n    const handleChangeRadio = (event) => {\n        setProductType(event.target.value === 'در انبار' ? \"1\" : \"2\")\n    };\n    const handleChangeSwitch = (event) => {\n        setIsExist(event.target.checked)\n    };\n\n\n    const handleChange = (props) => (event) => {\n        setStockValues(() => {\n            let changedProducts = [...stockValues]\n            changedProducts[props].count = event.target.value\n            return changedProducts\n        })\n    }\n    const handleAfterOrderCount = (event) => {\n        setAfterOrderValue(event.target.value)\n    }\n\n    const inStock = (\n        <Grid direction={\"row\"} container className={classes.container}>\n            <Grid container>\n                <Grid item xs={4} style={{textAlign: 'center'}}>\n                    <span className={classes.label}>رنگ</span>\n                </Grid>\n                <Grid item xs={4} style={{textAlign: 'center'}}>\n                    <span className={classes.label}>سایز</span>\n                </Grid>\n                <Grid item xs={4} style={{textAlign: 'center'}}>\n                    <span className={classes.label}>تعداد</span>\n                </Grid>\n            </Grid>\n            {\n                stockValues.map((product, index) => (\n                    <Grid container spacing={1}>\n                        <Grid item xs={4}>\n                            <TextField\n                                value={product.color}\n                                margin={'normal'}\n                                InputProps={{\n                                    classes: {\n                                        input: classes.textFieldColor\n                                    }\n                                }}\n                                disabled\n                                variant=\"outlined\"\n\n                            />\n                        </Grid>\n                        <Grid item xs={4} style={{textAlign: 'center'}}>\n                            <TextField\n                                value={product.size}\n\n                                margin={'normal'}\n                                InputProps={{\n                                    classes: {\n                                        input: classes.textFieldSize\n                                    }\n                                }}\n                                variant=\"outlined\"\n                                disabled\n                            />\n                        </Grid>\n                        <Grid item xs={4} style={{textAlign: 'center'}}>\n                            <TextField\n                                type={'number'}\n                                helperText={'برای ناموجود 0 لحاظ کنید'}\n                                margin={'normal'}\n                                value={product.count}\n                                onChange={handleChange(index)}\n                                InputProps={{\n                                    classes: {\n                                        input: classes.textFieldCount\n                                    }\n                                }}\n                                FormHelperTextProps={{\n                                    style: {\n                                        fontFamily: 'Shabnam',\n                                        fontSize: 10,\n                                        textAlign: 'center'\n                                    }\n                                }}\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                    </Grid>\n                ))\n            }\n\n        </Grid>\n    )\n\n\n    const afterOrder = (\n        <>\n            <Typography className={classes.label}>تعداد</Typography>\n            <TextField\n                dir={'ltr'}\n                type={'number'}\n                id={'afterOrder-count'}\n                margin={'normal'}\n                fullWidth\n                onChange={handleAfterOrderCount}\n                value={afterOrderValue}\n                InputProps={{\n                    classes: {\n                        input: classes.textFieldCount\n                    }\n                }}\n                FormHelperTextProps={{\n                    style: {\n                        fontFamily: 'Shabnam',\n                        fontSize: 14,\n                        textAlign: 'right'\n                    }\n                }}\n                variant=\"outlined\"\n            />\n\n        </>\n    )\n\n\n    return (\n        <Card>\n            <CardHeader\n                title={\n                    <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                        <Typography className={classes.title}>موجودی</Typography>\n                        <StyledSwitch\n                            checked={isExist}\n                            onChange={handleChangeSwitch}\n                            name=\"موجودی\"\n                        />\n                    </div>\n                }\n\n            />\n            {\n                isExist ?\n                    <CardContent>\n\n                        <StyledRadio\n                            checked={productType === \"1\"}\n                            onChange={handleChangeRadio}\n                            value=\"در انبار\"\n                            name=\"در انبار\"\n                            inputProps={{'aria-label': 'در انبار'}}\n                        />\n                        <span className={classes.label}>در انبار</span>\n                        <StyledRadio\n                            checked={productType === \"2\"}\n                            onChange={handleChangeRadio}\n                            value=\"ساخت پس از سفارش\"\n                            name=\"ساخت پس از سفارش\"\n                            inputProps={{'aria-label': 'ساخت پس از سفارش'}}\n                        />\n                        <span className={classes.label}>ساخت پس از سفارش</span>\n                        <Divider/>\n                        <br/>\n                        {\n                            productType === \"1\" ?\n                                stockValues.length > 0 ? inStock : null\n                                :\n                                afterOrder\n                        }\n                    </CardContent>\n                    :\n                    null\n            }\n        </Card>\n    )\n}\n\nProductStock.propTypes = {\n    colorTags: PropTypes.any.isRequired,\n    sizeTags: PropTypes.any.isRequired,\n\n    stockValues: PropTypes.array.isRequired,\n    setStockValues: PropTypes.func.isRequired,\n\n    isExist: PropTypes.bool.isRequired,\n    setIsExist: PropTypes.func.isRequired,\n\n    afterOrderValue: PropTypes.string.isRequired,\n    setAfterOrderValue: PropTypes.func.isRequired,\n    productType: PropTypes.string.isRequired,\n    setProductType: PropTypes.func.isRequired,\n};\n\nexport default ProductStock","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/AddImage.js",["367"],"import React, {useState} from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport {Button, CardContent, CardHeader, CardMedia, IconButton, Typography} from \"@material-ui/core\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport AddCircleOutlineIcon from \"@material-ui/icons/AddCircleOutline\";\nimport AddImageDialog from \"./AddImageDialog\";\nimport PropTypes from \"prop-types\";\nimport useForceUpdate from '../../utills/Hooks/useForceUpdate'\nimport {useStyle} from \"./Styles/ImagesStyle\";\n\n\nfunction AddImage(props) {\n    const\n        {\n            preview_imageFormData, setPreview_imageFormData,\n            other_imageFormData, setOther_imageFormData\n        } = props\n    const classes = useStyle()\n    const [open, setOpen] = useState(false);\n    const [preview_imageFile, setPreview_imageFile] = useState(null)\n    const [other_imageFiles, setOther_imageFiles] = useState([])\n\n    const forceUpdate = useForceUpdate();\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    const handleClickOpen = () => {\n        setOpen(true)\n    }\n    const uploadImageHandler = (imageFile) => {\n        if (preview_imageFile === null) {\n            setPreview_imageFile(imageFile)\n\n            const formData = new FormData();\n            formData.append(\"preview_image\", imageFile);\n            setPreview_imageFormData(formData)\n        } else {\n            setOther_imageFiles(prevState => {\n                return [...prevState, imageFile]\n            })\n\n            const formData = new FormData()\n            formData.append(\"other_image\", imageFile)\n            setOther_imageFormData(prevState => {\n                return [...prevState, formData]\n            })\n\n        }\n        setOpen(false)\n\n    }\n\n    const editImageHandler = (index, isPreview) => (event) => {\n        const imageFile = event.target.files[0]\n        if (isPreview) {\n            setPreview_imageFile(imageFile)\n            const formData = new FormData()\n            formData.append(\"preview_image\", imageFile)\n            setPreview_imageFormData(formData)\n        } else {\n            let editedArray = other_imageFiles\n            editedArray[index] = imageFile\n            setOther_imageFiles(editedArray)\n\n            let editedFormDataArray = other_imageFormData\n            const formData = new FormData()\n            formData.append(\"other_image\", imageFile)\n            editedFormDataArray[index] = formData\n            setOther_imageFormData(editedFormDataArray)\n\n        }\n        forceUpdate()\n    }\n\n    const deleteImageHandler = (index, isPreview) => {\n        if (isPreview) {\n            setPreview_imageFile(null)\n            // edit form data of preview images\n            setPreview_imageFormData(null)\n            if (other_imageFiles.length > 0) {\n                setPreview_imageFile(other_imageFiles[0])\n                // send form data of preview image\n                const formData = new FormData();\n                formData.append(\"preview_image\", other_imageFiles[0]);\n                setPreview_imageFormData(formData)\n\n                setOther_imageFiles(other_imageFiles\n                    .filter(item => item !== other_imageFiles[0]))\n                // edit form data of other images\n                setOther_imageFormData(other_imageFormData\n                    .filter(item => item !== other_imageFormData[0]))\n            }\n        } else {\n            setOther_imageFiles(other_imageFiles\n                .filter(item => item !== other_imageFiles[index]))\n            // edit form data of other images\n            setOther_imageFormData(other_imageFormData\n                .filter(item => item !== other_imageFormData[index]))\n        }\n\n    }\n\n\n    return (\n        <Card>\n            <CardHeader\n                title={<Typography className={classes.title}>عکس ها</Typography>}\n            />\n            <CardContent>\n                {\n                    preview_imageFile ?\n                        <Card className={classes.root} style={{position: 'relative'}}>\n                            <Typography className={classes.previewTitle}>عکس پیش نمایش</Typography>\n                            <CardMedia\n                                className={classes.cover}\n                                image={URL.createObjectURL(preview_imageFile)}\n                                component={'img'}\n                            />\n                            <CardContent className={classes.detail}>\n                                <CardActions className={classes.actions}>\n                                    <input\n                                        accept=\"image/*\"\n                                        hidden\n                                        id={`upload-preview-image`}\n                                        multiple\n                                        type=\"file\"\n                                        onChange={editImageHandler(0, true)}\n                                    />\n                                    <label htmlFor={`upload-preview-image`}>\n                                        <Button\n                                            size={\"small\"}\n                                            className={classes.upload}\n                                            variant={\"contained\"}\n                                            component={'span'}\n                                        >\n                                            آپلود\n                                        </Button>\n                                    </label>\n                                    <Button\n                                        onClick={() => deleteImageHandler(0, true)}\n                                        size={\"small\"}\n                                        className={classes.delete}\n                                    >\n                                        حذف\n                                    </Button>\n                                </CardActions>\n                            </CardContent>\n                        </Card> : null\n                }\n\n                {\n                    other_imageFiles.map((imageFile, index) => (\n                        <Card className={classes.root}>\n                            <CardMedia\n                                className={classes.cover}\n                                image={URL.createObjectURL(imageFile)}\n                                // title={imageFile.name}\n                                component={'img'}\n                            />\n                            <CardContent className={classes.detail}>\n                                <CardActions className={classes.actions}>\n                                    <input\n                                        accept=\"image/*\"\n                                        hidden\n                                        id={`upload-image-${index}`}\n                                        multiple\n                                        type=\"file\"\n                                        onChange={editImageHandler(index, false)}\n                                    />\n                                    <label htmlFor={`upload-image-${index}`}>\n                                        <Button\n                                            size={\"small\"}\n                                            className={classes.upload}\n                                            variant={\"contained\"}\n\n                                            component={'span'}\n                                        >\n                                            آپلود\n                                        </Button>\n                                    </label>\n                                    <Button\n                                        onClick={() => deleteImageHandler(index, false)}\n                                        size={\"small\"}\n                                        className={classes.delete}\n                                    >\n                                        حذف\n                                    </Button>\n                                </CardActions>\n\n                            </CardContent>\n                        </Card>\n                    ))\n                }\n                <div className={classes.addImage}>\n                    <IconButton onClick={handleClickOpen} className={classes.addImage}>\n                        <AddCircleOutlineIcon/>\n                    </IconButton>\n                    <span>اضافه کردن عکس جدید</span>\n                </div>\n                <AddImageDialog uploadImageHandler={uploadImageHandler} open={open} onClose={handleClose}/>\n\n            </CardContent>\n        </Card>\n    )\n\n}\n\nAddImage.propTypes = {\n    preview_imageFormData: PropTypes.any.isRequired,\n    setPreview_imageFormData: PropTypes.func.isRequired,\n    other_imageFormData: PropTypes.array.isRequired,\n    setOther_imageFormData: PropTypes.func.isRequired,\n};\n\nexport default AddImage","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/ProductInfo.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardForms/DashboardMenu.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardForms/Styles/LayoutStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/Styles/AttributesStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/Styles/SocialNetworkStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Management/Styles/SlidersStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/utills/Hooks/useForceUpdate.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/Styles/ImagesStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/AddImageDialog.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/Routes/Link/ListItemLink.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/Styles/ProductStockStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Products/Styles/ProductInfoStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardForms/Styles/MenuStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Comments/CommentCard.js",["368","369"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport Card from \"@material-ui/core/Card\";\nimport {Button, CardContent, CardHeader, Divider, IconButton, SvgIcon, Typography} from \"@material-ui/core\";\nimport profile from '../../img/profile.png'\nimport {useCommentCardStyles} from \"./Styles/useCommentCardStyle\";\nimport {toFaDigit} from \"../../utills/ToFaDigit\";\nimport moment from \"jalali-moment\";\nimport useChangeCommentStatus from \"./Actions/useChangeCommentStatus\";\nimport useDeleteComment from \"./Actions/useDeleteComment\";\nimport {useHistory} from \"react-router-dom\";\n\n\nfunction CommentCard(props) {\n    const history = useHistory()\n    const {comment, refresh} = props\n    const classes = useCommentCardStyles()\n    const [fetchDeleteComment, setFetchDeleteComment] = useState(false)\n    const [fetchChangeStatus, setFetchChangeStatus] = useState(false)\n    const [selectedStatus, setSelectedStatus] = useState(1)\n\n    const [loadingChangeStatus, changeStatusResult] = useChangeCommentStatus(fetchChangeStatus, comment.id, selectedStatus)\n    const [loadingDeleteComment, deleteCommentResult] = useDeleteComment(fetchDeleteComment, comment.id)\n    const createStatus = (status) => {\n        const statusColor = status === '2' ? '#22B132' : '#F16522'\n        return (\n            <div className={classes.statusRec} style={{backgroundColor: statusColor}}>\n                <Typography className={classes.statusText}\n                            component={\"span\"}>{`${status === '2' ? 'تایید شده' : 'رد شده'}`}</Typography>\n                {\n                    status === '2'\n                        ?\n                        <span>\n                            <SvgIcon className={classes.statusIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"13.364\"\n                                     height=\"13.207\"\n                                     viewBox=\"0 0 13.364 13.207\">\n                            <g id=\"check-circle\" transform=\"translate(-1.343 -1.368)\">\n                                <path id=\"Path_30121\" data-name=\"Path 30121\" d=\"M14,7.445V8a6,6,0,1,1-3.558-5.484\"\n                                      fill=\"none\" stroke=\"#fff\" strokeLinecap=\"round\"\n                                      strokeWidth=\"1\"/>\n                                <path id=\"Path_30122\" data-name=\"Path 30122\" d=\"M16.8,4l-6,6.006L9,8.206\"\n                                      transform=\"translate(-2.8 -0.802)\" fill=\"none\" stroke=\"#fff\"\n                                      strokeLinecap=\"round\"\n                                      strokeLinejoin=\"round\" strokeWidth=\"1\"/>\n                            </g>\n                        </SvgIcon>\n                        </span>\n                        : <span>\n                            <SvgIcon className={classes.statusIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"13\"\n                                     height=\"13\" viewBox=\"0 0 13 13\">\n                            <g id=\"x-circle\" transform=\"translate(-1.5 -1.5)\">\n                                <circle id=\"Ellipse_118\" data-name=\"Ellipse 118\" cx=\"6\" cy=\"6\" r=\"6\"\n                                        transform=\"translate(2 2)\" fill=\"none\" stroke=\"#fff\" strokeLinecap=\"round\"\n                                        strokeLinejoin=\"round\" strokeWidth=\"1\"/>\n                                <line id=\"Line_32\" data-name=\"Line 32\" x1=\"3.6\" y2=\"3.6\" transform=\"translate(6.2 6.2)\"\n                                      fill=\"none\" stroke=\"#fff\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                      strokeWidth=\"1\"/>\n                                <line id=\"Line_33\" data-name=\"Line 33\" x2=\"3.6\" y2=\"3.6\" transform=\"translate(6.2 6.2)\"\n                                      fill=\"none\" stroke=\"#fff\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                      strokeWidth=\"1\"/>\n                            </g>\n                        </SvgIcon>\n                        </span>\n                }\n            </div>\n        )\n    }\n\n    useEffect(() => {\n        if (!loadingDeleteComment) {\n            if (deleteCommentResult)\n                refresh()\n            setFetchDeleteComment(false)\n        }\n    }, [loadingDeleteComment, deleteCommentResult, history])\n    useEffect(() => {\n        if (!loadingChangeStatus && changeStatusResult) {\n            refresh()\n            setFetchChangeStatus(false)\n        }\n    }, [loadingChangeStatus, changeStatusResult, history])\n    const createDeleteAction = (\n        <IconButton onClick={() => setFetchDeleteComment(true)}>\n            <Typography\n                style={{\n                    color: '#F16522',\n                    fontSize: '12px',\n                    fontFamily: 'Shabnam',\n                    margin: '8px 8px'\n                }}\n                component={'span'}\n            >حذف\n            </Typography>\n            <SvgIcon style={{width: 10.8, height: 12}} xmlns=\"http://www.w3.org/2000/svg\" width=\"15.9\" height=\"17.5\"\n                     viewBox=\"0 0 15.9 17.5\">\n                <g id=\"trash-2\" transform=\"translate(-2.25 -1.25)\">\n                    <path id=\"Path_2584\" data-name=\"Path 2584\" d=\"M3,6H17.4\"\n                          transform=\"translate(0 -0.8)\" fill=\"none\" stroke=\"#f16522\"\n                          strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                          strokeWidth=\"1.5\"/>\n                    <path id=\"Path_2585\" data-name=\"Path 2585\"\n                          d=\"M16.2,5.2V16.4A1.6,1.6,0,0,1,14.6,18h-8A1.6,1.6,0,0,1,5,16.4V5.2m2.4,0V3.6A1.6,1.6,0,0,1,9,2h3.2a1.6,1.6,0,0,1,1.6,1.6V5.2\"\n                          transform=\"translate(-0.4)\" fill=\"none\" stroke=\"#f16522\"\n                          strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                          strokeWidth=\"1.5\"/>\n                    <line id=\"Line_26\" data-name=\"Line 26\" y2=\"4.8\"\n                          transform=\"translate(8.6 9.2)\" fill=\"none\"\n                          stroke=\"#f16522\"\n                          strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                          strokeWidth=\"1.5\"/>\n                    <line id=\"Line_27\" data-name=\"Line 27\" y2=\"4.8\"\n                          transform=\"translate(11.8 9.2)\" fill=\"none\"\n                          stroke=\"#f16522\"\n                          strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                          strokeWidth=\"1.5\"/>\n                </g>\n            </SvgIcon>\n\n        </IconButton>\n    )\n\n\n    const crateSelectStatusAction = (\n        <div className={classes.actions}>\n            <Button\n                onClick={() => {\n                    setSelectedStatus(2)\n                    setFetchChangeStatus(true)\n                }}\n                size={'small'}\n                dir={'ltr'}\n                className={classes.accept}\n                variant={\"outlined\"}\n                endIcon={\n                    <SvgIcon xmlns=\"http://www.w3.org/2000/svg\" width=\"13.364\"\n                             height=\"13.207\"\n                             viewBox=\"0 0 13.364 13.207\">\n                        <g id=\"check-circle\" transform=\"translate(-1.343 -1.368)\">\n                            <path id=\"Path_30121\" data-name=\"Path 30121\" d=\"M14,7.445V8a6,6,0,1,1-3.558-5.484\"\n                                  fill=\"none\" stroke=\"#21b132\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                  strokeWidth=\"1\"/>\n                            <path id=\"Path_30122\" data-name=\"Path 30122\" d=\"M16.8,4l-6,6.006L9,8.206\"\n                                  transform=\"translate(-2.8 -0.802)\" fill=\"none\" stroke=\"#21b132\"\n                                  strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"1\"/>\n                        </g>\n                    </SvgIcon>\n                }\n            >\n                تایید\n            </Button>\n            <Button\n                dir={'ltr'}\n                size={'small'}\n                onClick={() => {\n                    setSelectedStatus(3)\n                    setFetchChangeStatus(true)\n                }}\n                className={classes.decline}\n                variant={\"outlined\"}\n                endIcon={\n                    <SvgIcon className={classes.svgIcon} xmlns=\"http://www.w3.org/2000/svg\" width=\"13\" height=\"13\"\n                             viewBox=\"0 0 13 13\">\n                        <g id=\"x-circle\" transform=\"translate(-1.5 -1.5)\">\n                            <circle id=\"Ellipse_118\" data-name=\"Ellipse 118\" cx=\"6\" cy=\"6\" r=\"6\"\n                                    transform=\"translate(2 2)\" fill=\"none\" stroke=\"#f16522\" strokeLinecap=\"round\"\n                                    strokeLinejoin=\"round\" strokeWidth=\"1\"/>\n                            <line id=\"Line_32\" data-name=\"Line 32\" x1=\"3.6\" y2=\"3.6\" transform=\"translate(6.2 6.2)\"\n                                  fill=\"none\" stroke=\"#f16522\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                  strokeWidth=\"1\"/>\n                            <line id=\"Line_33\" data-name=\"Line 33\" x2=\"3.6\" y2=\"3.6\" transform=\"translate(6.2 6.2)\"\n                                  fill=\"none\" stroke=\"#f16522\" strokeLinecap=\"round\" strokeLinejoin=\"round\"\n                                  strokeWidth=\"1\"/>\n                        </g>\n                    </SvgIcon>\n                }\n            >\n                رد کردن\n            </Button>\n\n        </div>\n    )\n    return (\n        <div>\n            {\n                comment.status !== '' ?\n                    <Card>\n                        <div className={classes.header}>\n                            <CardHeader\n                                title={\n                                    <div className={classes.detail}>\n                                        <Typography\n                                            className={classes.title}\n                                        >\n                                            {`محصول: ${comment.merchandise ? comment.merchandise.title : 'بدون محصول'} -\n                                             تاریخ ارسال: \n                                             ${toFaDigit(moment.unix(comment.create_date).format(\"jYYYY/jM/jD\"))}`\n                                            }\n                                        </Typography>\n                                        {comment.status !== '1' ? createStatus(comment.status) : null}\n                                    </div>\n                                }\n                            />\n                            {\n                                comment.status !== '1'\n                                    ? createDeleteAction\n                                    : comment.status !== ''\n                                    ? crateSelectStatusAction : null\n                            }\n                        </div>\n                        <Divider/>\n                        <CardContent className={classes.content}>\n                            <img className={classes.profile} src={profile} alt={comment.user.name_and_last_name}/>\n                            <div style={{marginRight: 20, display: 'flex', flexDirection: 'column'}}>\n                                <Typography className={classes.username}>{comment.user.name_and_last_name}</Typography>\n                                <Typography className={classes.comment}>{comment.text}</Typography>\n                            </div>\n                        </CardContent>\n                    </Card>\n                    : null\n            }\n        </div>\n    )\n\n}\n\n\nCommentCard.propTypes = {\n    comment: PropTypes.object.isRequired,\n    refresh: PropTypes.func,\n};\n\nexport default CommentCard","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Fiance/Style.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Category/AddCategoryDialog.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/Styles/CampaignSectionStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/useCampaignsData.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/CampaignDiscount.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/CampaignAmazing.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/CampaignBanners.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/CartCost.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/ProductDetail.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/CartDetail.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/CustomerInfo.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/OrderState.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/Styles/AmazingStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/Styles/BannersStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Campaign/Styles/DiscountTableStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/utills/Auth.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Comments/Actions/useAllCommentsData.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Public/DeleteDialog.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Comments/Actions/useDeleteComment.js",["370"],"import {useEffect, useState} from \"react\";\nimport {useAxios} from \"../../../utills/Hooks/useAxios\";\n\nfunction useDeleteComment(fetch, id) {\n    const [result, setResult] = useState()\n    const [loading, setLoading] = useState(false)\n    const [, deleteComment] = useAxios({\n        url: '/admin/comment_mng/delete_comment',\n        method: 'DELETE',\n    }, {manual: true})\n\n    useEffect(() => {\n        async function getResult() {\n            try {\n                setLoading(true)\n                const response = await deleteComment({\n                    data: {\n                        \"id\": id,\n                    }\n                })\n                setResult(response.data.status === 'success')\n            } catch (err) {\n                setResult(false)\n            }\n            setLoading(false)\n        }\n\n        if (fetch)\n            getResult().then()\n\n    }, [fetch])\n\n    return [loading, result]\n}\n\nexport default useDeleteComment","/Users/tavallai/codes/JS/didartshop-dashboard/src/utills/Hooks/useCategoriesData.js",["371"],"import {useEffect, useState} from \"react\";\nimport {useAxios} from \"./useAxios\";\n\n\nfunction useCategoriesData(fetch) {\n    const [result, setResult] = useState([])\n    const [loading, setLoading] = useState(true)\n    const [, getCategories] = useAxios({\n        url: '/get_all_category',\n    }, {manual: true})\n\n    useEffect(() => {\n        async function getResult() {\n            try {\n                setLoading(true)\n                const response = await getCategories()\n                setResult(\n                    response.data.data.categories\n                    .sort((a, b) => a.name.localeCompare(b.name))\n                )\n                setLoading(false)\n            } catch (err) {\n                setLoading(false)\n            }\n        }\n\n        if (fetch)\n            getResult().then()\n\n    }, [fetch])\n\n    return [loading, result]\n}\n\nexport default useCategoriesData","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Comments/Actions/useChangeCommentStatus.js",["372","373"],"import {useEffect, useState} from \"react\";\nimport {useAxios} from \"../../../utills/Hooks/useAxios\";\nimport {useHistory} from \"react-router-dom\";\n\nfunction useChangeCommentStatus(fetch, id, status) {\n    const history = useHistory()\n    const [result, setResult] = useState(null)\n    const [loading, setLoading] = useState(false)\n    const [, changeStatus] = useAxios({\n        url: '/admin/comment_mng/update_comment_status',\n        method: 'PATCH',\n    }, {manual: true})\n\n    useEffect(() => {\n        async function getResult() {\n            try {\n                setLoading(true)\n                const response = await changeStatus({\n                    data: {\n                        \"id\": id,\n                        \"status\": status,\n                    }\n                })\n                setResult(response.data.data)\n            } catch (err) {\n                setResult(null)\n            }\n            setLoading(false)\n        }\n\n        if (fetch)\n            getResult().then()\n\n    }, [fetch])\n\n    return [loading, result]\n}\n\nexport default useChangeCommentStatus","/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Comments/Styles/useCommentCardStyle.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/utills/Hooks/useLogin.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/Styles/useOrderSectionStyles.js",[],"/Users/tavallai/codes/JS/didartshop-dashboard/src/DashboardComponents/Orders/FetchData/useOrderDetails.js",[],{"ruleId":"374","replacedBy":"375"},{"ruleId":"376","replacedBy":"377"},{"ruleId":"378","severity":1,"message":"379","line":45,"column":8,"nodeType":"380","endLine":45,"endColumn":10,"suggestions":"381"},{"ruleId":"382","severity":1,"message":"383","line":12,"column":8,"nodeType":"384","messageId":"385","endLine":12,"endColumn":17},{"ruleId":"382","severity":1,"message":"386","line":93,"column":22,"nodeType":"384","messageId":"385","endLine":93,"endColumn":33},{"ruleId":"382","severity":1,"message":"387","line":100,"column":22,"nodeType":"384","messageId":"385","endLine":100,"endColumn":33},{"ruleId":"382","severity":1,"message":"388","line":107,"column":22,"nodeType":"384","messageId":"385","endLine":107,"endColumn":35},{"ruleId":"378","severity":1,"message":"379","line":56,"column":8,"nodeType":"380","endLine":56,"endColumn":10,"suggestions":"389"},{"ruleId":"382","severity":1,"message":"390","line":2,"column":41,"nodeType":"384","messageId":"385","endLine":2,"endColumn":51},{"ruleId":"382","severity":1,"message":"391","line":2,"column":53,"nodeType":"384","messageId":"385","endLine":2,"endColumn":57},{"ruleId":"382","severity":1,"message":"392","line":2,"column":59,"nodeType":"384","messageId":"385","endLine":2,"endColumn":66},{"ruleId":"378","severity":1,"message":"393","line":46,"column":8,"nodeType":"380","endLine":46,"endColumn":25,"suggestions":"394"},{"ruleId":"382","severity":1,"message":"395","line":116,"column":33,"nodeType":"384","messageId":"385","endLine":116,"endColumn":38},{"ruleId":"382","severity":1,"message":"396","line":8,"column":7,"nodeType":"384","messageId":"385","endLine":8,"endColumn":18},{"ruleId":"397","severity":1,"message":"398","line":79,"column":59,"nodeType":"399","messageId":"400","endLine":79,"endColumn":61},{"ruleId":"382","severity":1,"message":"401","line":5,"column":8,"nodeType":"384","messageId":"385","endLine":5,"endColumn":20},{"ruleId":"378","severity":1,"message":"402","line":53,"column":8,"nodeType":"380","endLine":53,"endColumn":29,"suggestions":"403"},{"ruleId":"382","severity":1,"message":"404","line":15,"column":13,"nodeType":"384","messageId":"385","endLine":15,"endColumn":34},{"ruleId":"378","severity":1,"message":"405","line":75,"column":8,"nodeType":"380","endLine":75,"endColumn":60,"suggestions":"406"},{"ruleId":"378","severity":1,"message":"405","line":81,"column":8,"nodeType":"380","endLine":81,"endColumn":58,"suggestions":"407"},{"ruleId":"378","severity":1,"message":"408","line":31,"column":8,"nodeType":"380","endLine":31,"endColumn":15,"suggestions":"409"},{"ruleId":"378","severity":1,"message":"410","line":30,"column":8,"nodeType":"380","endLine":30,"endColumn":15,"suggestions":"411"},{"ruleId":"382","severity":1,"message":"412","line":6,"column":11,"nodeType":"384","messageId":"385","endLine":6,"endColumn":18},{"ruleId":"378","severity":1,"message":"413","line":34,"column":8,"nodeType":"380","endLine":34,"endColumn":15,"suggestions":"414"},"no-native-reassign",["415"],"no-negated-in-lhs",["416"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'exportExcel' and 'fetch'. Either include them or remove the dependency array.","ArrayExpression",["417"],"no-unused-vars","'toFaDigit' is defined but never used.","Identifier","unusedVar","'postLoading' is assigned a value but never used.","'pathLoading' is assigned a value but never used.","'deleteLoading' is assigned a value but never used.",["418"],"'IconButton' is defined but never used.","'Link' is defined but never used.","'SvgIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["419"],"'fetch' is assigned a value but never used.","'socialNames' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ListItemLink' is defined but never used.","React Hook useEffect has missing dependencies: 'setStockValues' and 'stockValues'. Either include them or remove the dependency array.",["420"],"'preview_imageFormData' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'refresh'. Either include it or remove the dependency array.",["421"],["422"],"React Hook useEffect has missing dependencies: 'deleteComment' and 'id'. Either include them or remove the dependency array.",["423"],"React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.",["424"],"'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'changeStatus', 'id', and 'status'. Either include them or remove the dependency array.",["425"],"no-global-assign","no-unsafe-negation",{"desc":"426","fix":"427"},{"desc":"426","fix":"428"},{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"435","fix":"436"},{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"441","fix":"442"},"Update the dependencies array to be: [exportExcel, fetch]",{"range":"443","text":"444"},{"range":"445","text":"444"},"Update the dependencies array to be: [history, loading, result]",{"range":"446","text":"447"},"Update the dependencies array to be: [colorTags, setStockValues, sizeTags, stockValues]",{"range":"448","text":"449"},"Update the dependencies array to be: [loadingDeleteComment, deleteCommentResult, history, refresh]",{"range":"450","text":"451"},"Update the dependencies array to be: [loadingChangeStatus, changeStatusResult, history, refresh]",{"range":"452","text":"453"},"Update the dependencies array to be: [deleteComment, fetch, id]",{"range":"454","text":"455"},"Update the dependencies array to be: [fetch, getCategories]",{"range":"456","text":"457"},"Update the dependencies array to be: [changeStatus, fetch, id, status]",{"range":"458","text":"459"},[1678,1680],"[exportExcel, fetch]",[2156,2158],[1483,1500],"[history, loading, result]",[1705,1726],"[colorTags, setStockValues, sizeTags, stockValues]",[4195,4247],"[loadingDeleteComment, deleteCommentResult, history, refresh]",[4408,4458],"[loadingChangeStatus, changeStatusResult, history, refresh]",[878,885],"[deleteComment, fetch, id]",[816,823],"[fetch, getCategories]",[1003,1010],"[changeStatus, fetch, id, status]"]